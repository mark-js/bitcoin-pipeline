volumes:
  bitcoin-pipeline-gcp-redpanda:
    external: true
  bitcoin-pipeline-gcp-data:
    external: true
  bitcoin-pipeline-gcp-airflow-postgres:
    external: true
  bitcoin-pipeline-gcp-postgres:
    external: true
networks:
  bitcoin-pipeline-gcp-network:
    external: true

x-airflow-common:
  &airflow-common
  image: airflow-base
  build: ./docker/airflow
  env_file: ./docker/airflow/.env
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
  volumes:
    - ./airflow/dags:/opt/airflow/dags:rw
    - ./airflow/logs:/opt/airflow/logs:rw
    - ./airflow/include:/opt/airflow/include:rw
    - bitcoin-pipeline-gcp-data:/opt/data
    - ${AIRFLOW_GOOGLE_CREDENTIALS_AIRFLOW}:/opt/.google/google.json
  networks:
    - bitcoin-pipeline-gcp-network
  user: "1000:0"
  depends_on:
    &airflow-common-depends-on
    airflow-postgres:
      condition: service_healthy

services:
  airflow-postgres:
    image: postgres:16
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - bitcoin-pipeline-gcp-airflow-postgres:/var/lib/postgresql/data
    networks:
      - bitcoin-pipeline-gcp-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    environment:
      <<: *airflow-common-env
      SHELL: /bin/bash
    ports:
      - 8888:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    environment:
      <<: *airflow-common-env
      SHELL: /bin/bash
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "1000" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /opt/data/
        chown -R "1000:0" /opt/data/
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"

  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ohlcv
    ports:
      - 5432:5432
    volumes:
      - bitcoin-pipeline-gcp-postgres:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - bitcoin-pipeline-gcp-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redpanda-0:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr redpanda-0:33145
      - --advertise-rpc-addr redpanda-0:33145
      - --mode dev-container
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v24.3.5
    container_name: redpanda-0
    volumes:
      - bitcoin-pipeline-gcp-redpanda:/var/lib/redpanda/data
    networks:
      - bitcoin-pipeline-gcp-network
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644

  flink-jobmanager:
    container_name: flink-jobmanager
    build: ./docker/flink
    env_file: ./docker/flink/.env
    pull_policy: never
    platform: linux/amd64
    hostname: jobmanager
    expose:
      - 6123
    ports:
      - 8088:8081
    volumes:
      - ./bitcoin_pipeline:/opt/bitcoin_pipeline
      - ${AIRFLOW_GOOGLE_CREDENTIALS_BIGQUERY}:/opt/.google/google.json
    networks:
      - bitcoin-pipeline-gcp-network 
    extra_hosts:
      - "host.docker.internal:127.0.0.1"
      - "host.docker.internal:host-gateway"
    environment:
      - POSTGRES_URL=${POSTGRES_URL:-jdbc:postgresql://host.docker.internal:5432/postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager  
    command: jobmanager    

  flink-taskmanager:
    container_name: flink-taskmanager
    build: ./docker/flink
    env_file: ./docker/flink/.env
    pull_policy: never
    platform: linux/amd64
    expose:
      - 6121
      - 6122
    volumes:
      - ./bitcoin_pipeline:/opt/bitcoin_pipeline
      - ${AIRFLOW_GOOGLE_CREDENTIALS_BIGQUERY}:/opt/.google/google.json
    networks:
      - bitcoin-pipeline-gcp-network
    extra_hosts:
      - "host.docker.internal:127.0.0.1"
      - "host.docker.internal:host-gateway"
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 15
        parallelism.default: 3
    command: taskmanager --taskmanager.registration.timeout 5 min
    depends_on:
      - flink-jobmanager

  websocket-producer:
    image: websocket-producer
    container_name: websocket-producer
    build: ./docker/websocket-producer
    env_file: docker/websocket-producer/.env
    volumes:
      - ./bitcoin_pipeline:/home/user/bitcoin_pipeline
    networks:
      - bitcoin-pipeline-gcp-network
    entrypoint: python /home/user/bitcoin_pipeline/kafka/producer.py
    profiles: [app]

  dash-app:
    image: dash-app
    container_name: dash-app
    build: ./docker/dash-app
    env_file: ./docker/dash-app/.env
    ports:
      - 8050:8050
    volumes:
      - ./bitcoin_pipeline:/home/user/bitcoin_pipeline
      - ${AIRFLOW_GOOGLE_CREDENTIALS_BIGQUERY}:/home/user/.google/google.json
    networks:
      - bitcoin-pipeline-gcp-network
    entrypoint: python /home/user/bitcoin_pipeline/app.py gcp
    profiles: [app]